
BEGIN;


DROP TABLE IF EXISTS CAVES_has_VINS, AVIS, CAVES, VINS, UTILISATEURS CASCADE;

-- Table UTILISATEURS
CREATE TABLE UTILISATEURS (
  id INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
  pseudonyme VARCHAR(255) UNIQUE NOT NULL,
  email VARCHAR(255) UNIQUE NOT NULL,
  mot_de_passe VARCHAR(255) NOT NULL
);

-- Table VINS
CREATE TABLE VINS (
  id INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
  couleur VARCHAR(50) NOT NULL,
  annee INT NOT NULL,
  appellation VARCHAR(255),
  nom VARCHAR(255) UNIQUE NOT NULL,
  quantite INT,
  is_consumed BOOLEAN,
  favoris BOOLEAN
);

-- Table CAVES
CREATE TABLE CAVES (
  id INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
  nom VARCHAR(255) NOT NULL,
  utilisateur_id INT NOT NULL,
  FOREIGN KEY (utilisateur_id) REFERENCES UTILISATEURS(id) ON DELETE CASCADE
);

-- Table AVIS
CREATE TABLE AVIS (
  id INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
  note INT CHECK (note >= 1 AND note <= 10),
  commentaire TEXT,
  vin_id INT,
  FOREIGN KEY (vin_id) REFERENCES VINS(id) ON DELETE CASCADE
);

-- Table d'association CAVES <-> VINS (relation many to many)
CREATE TABLE CAVES_has_VINS (
  cave_id INT,
  vin_id INT,
  PRIMARY KEY (cave_id, vin_id),
  FOREIGN KEY (cave_id) REFERENCES CAVES(id) ON DELETE CASCADE,
  FOREIGN KEY (vin_id) REFERENCES VINS(id) ON DELETE CASCADE
);

COMMIT;
